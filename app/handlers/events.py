from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext

from app.entrypoint import dp
from app.core import states
from app.core.states import UserStates
from app.services import events, users


@dp.message_handler(commands="join")
async def join_event(message: types.Message) -> None:
    """Join event."""
    state = await users.get_user_state(message.from_user.id)
    if state != UserStates.NO_EVENT:
        return await message.answer("–¢—ã —É–∂–µ –≤—Å—Ç—É–ø–∏–ª –≤ —Å–æ–±—ã—Ç–∏–µ. (/event)")

    event = await events.get_current_event()
    if event is None:
        return await message.answer("üò±–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –°–æ–∑–¥–∞–π —Å–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ! (/create)")

    await events.join_event(message.from_user.id, event.id)
    await users.change_state(message.from_user.id, UserStates.ADD_PLAYLIST)
    await message.answer("üéâ–¢—ã –≤—Å—Ç—É–ø–∏–ª –≤ —Å–æ–±—ã—Ç–∏–µ. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç. (/add)")


@dp.message_handler(commands="create", state="*")
async def create_event_name(message: types.Message, state: FSMContext) -> None:
    event = await events.get_current_event()
    if event is not None:
        return await message.answer("üò±–°–µ–π—á–∞—Å —É–∂–µ –∏–¥–µ—Ç —Å–æ–±—ã—Ç–∏–µ! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è! (/join)")

    await message.answer("üéâ–°–æ–∑–¥–∞–π —Å–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!\n–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(states.CreateEvent.name)


@dp.message_handler(state=states.CreateEvent.name)
async def create_event_description(message: types.Message, state: FSMContext) -> None:
    await state.update_data(name=message.text)
    await state.set_state(states.CreateEvent.description)
    await message.answer("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")


@dp.message_handler(state=states.CreateEvent.description)
async def create_event_rules(message: types.Message, state: FSMContext) -> None:
    await state.update_data(description=message.text)
    await state.set_state(states.CreateEvent.rules)
    await message.answer("–ù–∞–ø–∏—à–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–±—ã—Ç–∏—è:")


@dp.message_handler(state=states.CreateEvent.rules)
async def create_event_start_date(message: types.Message, state: FSMContext) -> None:
    await state.update_data(rules=message.text)
    await state.set_state(states.CreateEvent.start_date)
    await message.answer("–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM:")


@dp.message_handler(state=states.CreateEvent.start_date)
async def create_event_start_time(message: types.Message, state: FSMContext) -> None:
    start_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
    await state.update_data(start_date=start_time)
    await state.set_state(states.CreateEvent.round_duration)
    await message.answer("–ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—É–Ω–¥–∞ –≤ —á–∞—Å–∞—Ö:")


@dp.message_handler(state=states.CreateEvent.round_duration)
async def create_event_finish(message: types.Message, state: FSMContext) -> None:
    await state.update_data(round_duration=message.text)
    data = await state.get_data()
    await message.answer(
        f"""–î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —É –Ω–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤ –∏—Ç–æ–≥–µ.
–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('name')}
–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}
–ü—Ä–∞–≤–∏–ª–∞: {data.get('rules')}
–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {data.get('start_date')}
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—É–Ω–¥–∞: {data.get('round_duration')}"""
    )
    await events.create_event(**data)
    await state.finish()
    await message.answer("üéâ–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")


# TODO: –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è
# –ì–∞–π–¥ –ø—Ä–æ –∞–≤—Ç–æ–º–∞—Ç—ã - https://mastergroosha.github.io/aiogram-2-guide/fsm/
